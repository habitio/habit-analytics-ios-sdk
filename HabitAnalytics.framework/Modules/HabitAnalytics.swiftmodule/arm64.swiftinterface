// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HabitAnalytics
import AVFoundation
import Alamofire
import SystemConfiguration.CaptiveNetwork
import CoreBluetooth
import CoreLocation
import CoreMotion
import CoreTelephony
import Foundation
@_exported import HabitAnalytics
import KeychainAccess
import Mixpanel
import RealmSwift
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
public typealias HabitStatusCode = Swift.Int
@objc @_inheritsConvenienceInitializers public class HabitAnalyticsSupportedCapabilites : ObjectiveC.NSObject {
  public static let Location: Swift.String
  public static let Bluetooth: Swift.String
  public static let Motion: Swift.String
  public static let AnalyticsTracker: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class HabitStatusCodes : ObjectiveC.NSObject {
  public static let USER_INITIALIZATION_SUCCESS: Swift.Int
  public static let HABIT_SDK_INITIALIZATION_SUCCESS: Swift.Int
  public static let HABIT_SDK_SET_AUTHENTICATION: Swift.Int
  public static let ANALYTICS_UX_EVENT_SENT: Swift.Int
  public static let LOGOUT_SUCCESS: Swift.Int
  public static let ANOTHER_USER_ALREADY_AUTHENTICATED_LOGOUT: Swift.Int
  public static let USER_INITIALIZATION_ERROR: Swift.Int
  public static let HABIT_SDK_INITIALIZATION_ERROR: Swift.Int
  public static let LOGOUT_ERROR: Swift.Int
  public static let HABIT_SDK_NOT_INITIALIZED: Swift.Int
  public static let INVALID_ANALYTICS_INFO: Swift.Int
  public static let ANALYTICS_UX_INVALID_APPLICATION_NAME: Swift.Int
  public static let ANALYTICS_UX_INVALID_TOKEN: Swift.Int
  public static let ANALYTICS_UX_INITIALIZATION_ERROR: Swift.Int
  public static let ANALYTICS_UX_NOT_INITIALIZED: Swift.Int
  public static let ANALYTICS_EVENTS_NOT_INITIALIZED: Swift.Int
  public static let ANALYTICS_EVENTS_INVALID_ID: Swift.Int
  public static let ANALYTICS_EVENTS_INVALID_SECRET: Swift.Int
  public static let ANALYTICS_EVENTS_OAUTH_ERROR: Swift.Int
  public static let ANALYTICS_EVENTS_LOGOUT_ERROR: Swift.Int
  public static let ANALYTICS_EVENTS_INITIALIZATION_ERROR: Swift.Int
  public static let SET_VALID_AUTHENTICATION_INFO: Swift.Int
  @objc public static func getDescription(code: Swift.Int) -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (HabitAnalytics.Reachability) -> ()
  public typealias NetworkUnreachable = (HabitAnalytics.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: HabitAnalytics.Reachability.NetworkStatus, b: HabitAnalytics.Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: HabitAnalytics.Reachability.Connection, b: HabitAnalytics.Reachability.Connection) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: HabitAnalytics.Reachability.NetworkReachable?
  public var whenUnreachable: HabitAnalytics.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: HabitAnalytics.Reachability.Connection {
    get
  }
  public var connection: HabitAnalytics.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension CMMotionActivity {
  public var confidenceNormalized: Swift.Double {
    get
  }
  public func isSameActivity(activity: CoreMotion.CMMotionActivity) -> Swift.Bool
  public var hasActivitySignature: Swift.Bool {
    get
  }
}
extension UIDevice {
  public var SSID: Swift.String? {
    get
  }
  public var BSSID: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class MixpanelManager {
  public func track(_ eventName: Swift.String, _ properties: [Swift.AnyHashable : Any]? = nil)
  public func logout()
  @objc deinit
}
@objc public protocol HabitAnalyticsDelegate : ObjectiveC.NSObjectProtocol {
  @objc func HabitAnalyticsStatusChange(statusCode: HabitAnalytics.HabitStatusCode)
}
@objc @_inheritsConvenienceInitializers public class HabitAnalytics : ObjectiveC.NSObject {
  @objc public static let shared: HabitAnalytics.HabitAnalytics
  public var delegate: HabitAnalytics.HabitAnalyticsDelegate?
  @objc public func initialize(namespace: Swift.String, analyticsInfo: Foundation.NSDictionary? = nil, authInfo: Foundation.NSDictionary? = nil, enabledCapabilities: [Swift.String]? = nil, completion: @escaping (HabitAnalytics.HabitStatusCode) -> Swift.Void)
  public func setAuthorization(authInfo: Foundation.NSDictionary, enabledCapabilities: [Swift.String]? = nil, completion: @escaping (HabitAnalytics.HabitStatusCode) -> Swift.Void)
  public func track(eventName: Swift.String, properties: [Swift.AnyHashable : Any]?) -> HabitAnalytics.HabitStatusCode
  @objc public func handleBGFetch(completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  public func logout(completion: @escaping (HabitAnalytics.HabitStatusCode) -> Swift.Void)
  @objc public func setDebugLogStatus(enabled: Swift.Bool)
  public func getNumberOfStoredEvents() -> Swift.Int
  public func getDebugLog() -> Swift.String
  public func deleteDebugLog()
  public func getVersion() -> Swift.String
  public func handlePushNotification(userInfo: [Swift.AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@available(*, unavailable, renamed: "Connection")
extension HabitAnalytics.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension HabitAnalytics.Reachability.NetworkStatus : Swift.Hashable {}
extension HabitAnalytics.Reachability.Connection : Swift.Equatable {}
extension HabitAnalytics.Reachability.Connection : Swift.Hashable {}
